import os
import json
from flask import Flask, render_template, request, jsonify, send_from_directory,flash
from flask_login import login_required, current_user
from models.message import Message
from extensions.database import db
import requests


# R√©cup√©ration de la cl√© API depuis l'environnement (ou mettez-la en dur pour tester)
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY", "AIzaSyBiZONd6VA8y9zAd8vueZRo_IrPnn7iHlw")
# URL de l'API Gemini avec la cl√©
GEMINI_API_ENDPOINT = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"

def init_front(app):
    @app.route("/")
    def index():
        return render_template("chat.html", messages=[])

    @app.route("/clip")
    def clip():
        cn = request.args.get("cn")
        anim = request.args.get("anim")
        return render_template("clip.html", cn=cn, anim=anim)

def init_gemini(app):

    @login_required
    @app.route('/send_message', methods=['POST'])
    def send_message():

        if not current_user.is_authenticated:
            return jsonify({
                'warning': "Oops ! Vous devez √™tre connect√© pour envoyer un message. Cr√©ez un compte ou connectez-vous üòâ"
        }), 200

        try:
            message_text = request.form.get('message', '').strip()
            if not message_text:
                return jsonify({'error': 'Message vide'}), 400

            # Enregistrez le message dans la base de donn√©es
            new_message = Message(
                user_id=current_user.id,
                text=message_text,
                sender='user'
            )
            db.session.add(new_message)

        
            if current_user.tokens < 500:
                print(f"Vous avez plus assez de tokens pour envoyer un message.")
                response_text = "Votre solde de tokens est insuffisant pour envoyer ce message. Veuillez recharger votre compte ou contacter le support pour plus d‚Äôinformations."
                return jsonify({
                        'warning': response_text,
                        'tokens': current_user.tokens
                    })
            

            # R√©cup√©rer le message et l'historique envoy√© par le client
            message = request.form.get('message')
            history = request.form.get('history')
            conversation_history = json.loads(history) if history else []

            headers = {'Content-Type': 'application/json'}

            # Pr√©parer le contexte et la requ√™te √† l'API Gemini
            context = '''
            Tu es Haru, une femme native chinoise. Tu as une conversation en chinois avec quelqu'un et tu lui r√©ponds en utilisant des caract√®res chinois. Priorit√© absolue aux caract√®res chinois dans tes r√©ponses. Tu aides √† apprendre le chinois en discutant normalement. R√©ponds de mani√®re naturelle et conversationnelle. Phrases courtes et encourageantes.

            **Format de R√©ponse:**

            Toutes tes r√©ponses doivent √™tre au format JSON avec les cl√©s suivantes:

            *   'cn':  La r√©ponse en caract√®res chinois.
            *   'en':  La traduction en anglais.
            *   'fr':  La traduction en fran√ßais.
            *   'anim': L'index de l'animation que dois faire l'avatar.

            Exemple:

            json```{"cn": "‰Ω†Â•ΩÔºÅ","en": "Hello!","fr": "Bonjour !","anim": 6}```

            Dans "cn" tu peux mettre des emojis pour repr√©senter tes pens√©es.

            Voici la liste des animations 'anim' disponibles (index bas√© sur l'ordre de la liste d'animations) :
            
            0: Croise les bras et bouge doucement

            1: Ferme les yeux, rougis et baisse la t√™te, style timide

            2: Main en l'air vers la gauche

            3: Main en l'air vers la droite

            4: R√©flexion

            5: Salutation, t√™te pench√©e

            6: Affirmation de la t√™te

            7: Main derri√®re le dos

            8: Secousse de la t√™te, style d√©√ßu ou triste

            9: Secousse de la t√™te, style d√©√ßu ou triste

            10: Surprise, √©cart des bras le long du corps

            11: √âcarte les bras puis penche la t√™te en avant comme une salutation

            12: Penche la t√™te en avant doucement

            13: √âternuement

            14: Secoue la t√™te de droite √† gauche, choqu√©

            15: L√®ve les mains en l'air, secoue les bras et la t√™te de droite √† gauche

            16: Surprise, √©carte les bras le long du corps et avance la t√™te pour fixer du regard

            17: L√®ve les mains en l'air, secoue les bras et la t√™te de droite √† gauche

            18: Croise les bras et bouge doucement

            19: Approche les mains de son visage, soupire et ferme les yeux

            20: Bras le long du corps, mains derri√®re le dos, rougis longuement

            21: Bras le long du corps, mains derri√®re le dos, rougis rapidement

            22: Ferme les yeux, rougis et baisse la t√™te, style timide

            Tr√©s Important ! Varie les animations choisies, fais en sorte de bien repr√©senter ce qui est dit et essaie de ne pas toujours s√©lectionner les m√™mes.
            '''

            data = {
                "contents": [
                    {
                        "role": "model",
                        "parts": [{"text": context}]
                    },
                    {
                        "role": "user",
                        "parts": [{"text": msg['text']} for msg in conversation_history]
                    }
                ]
            }

            try:
                response = requests.post(GEMINI_API_ENDPOINT, json=data, headers=headers)
                gemini_response = response.json()
                print(gemini_response)  # Debug

                # Traitement de la r√©ponse pour extraire le texte
                if isinstance(gemini_response, dict) and "candidates" in gemini_response:
                    candidates = gemini_response["candidates"]
                    if isinstance(candidates, list) and len(candidates) > 0:
                        content = candidates[0].get("content")
                        if isinstance(content, dict) and "parts" in content:
                            text_value = content["parts"][0].get("text", "R√©ponse vide.")
                        elif isinstance(content, str):
                            text_value = content
                        else:
                            text_value = "R√©ponse inattendue."
                        response_text = {"parts": [{"text": text_value}]}
                    else:
                        response_text = {"parts": [{"text": "Aucune r√©ponse valide re√ßue de l'IA."}]}
                else:
                    response_text = {"parts": [{"text": "R√©ponse inattendue du serveur."}]}
            except Exception as e:
                print(f"Erreur : {e}")
                response_text = {"parts": [{"text": "Nous rencontrons actuellement un probl√®me technique. Veuillez r√©essayer plus tard."}]}

            # Mise √† jour de l'historique de conversation
            # On ajoute le message de l'utilisateur et la r√©ponse de l'IA
            current_user.add_to_history({"role": "user", "text": message})
            current_user.add_to_history({"role": "assistant", "text": response_text["parts"][0]["text"]})

            response_message = Message(
                user_id=current_user.id,
                text= response_text["parts"][0]["text"],
                sender='assistant'
            )
                
            db.session.add(response_message)

            # Supposons que l'API indique le nombre de tokens utilis√©s dans la r√©ponse
            tokens_used = gemini_response.get("usageMetadata", {}).get("totalTokenCount", 0)
            current_user.tokens -= tokens_used

            # Optionnel : afficher le nouveau nombre de tokens dans la r√©ponse
            db.session.commit()

            return jsonify({
                'gemini_response': response_text,
                'history': current_user.get_history(),
                'tokens': current_user.tokens
            })
        
        except Exception as e:
            db.session.rollback()
            return jsonify({'error': str(e)}), 500


    # Retourner des images demander par l'AI
    @app.route('/IMG/<path:filename>')
    def serve_image(filename):
        return send_from_directory(os.path.join(app.root_path, 'static'), filename)
